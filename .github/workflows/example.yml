name: Example
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
permissions:
  contents: write
jobs:
  linux-dev:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    strategy:
      matrix:
        build: [ RelWithDebInfo, Debug ]
        mpi: [ libmpich-dev ]
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: MKL
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          # sudo apt-get update && sudo apt-get install intel-oneapi-mkl intel-oneapi-mpi intel-oneapi-mpi-devel
          sudo apt-get update && sudo apt-get install lcov ${{ matrix.mpi }}
      - name: Compile
        run: |
          # source /opt/intel/oneapi/setvars.sh
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build }} -DEZP_TEST=ON ..
          cmake --build . --target all
      - name: Test
        if: matrix.build == 'Debug' && matrix.mpi == 'libmpich-dev'
        run: |
          # source /opt/intel/oneapi/setvars.sh
          cd build
          for SRC in `find . -type f -executable -iname "*example*"`; do $SRC; done
          ./catch2
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
      - name: Report
        if: matrix.build == 'Debug'
        uses: codecov/codecov-action@v5
        with:
          plugins: gcov
          files: ./build/coverage.info
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  documentation:
    needs: linux-dev
    runs-on: ubuntu-24.04
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Deploy
        run: |
          sudo apt install doxygen graphviz
          doxygen
          cp README.md docs/README.md
          cp -r doxygen/ docs/
          pip install -r requirements.txt
          mkdocs build
          mkdocs gh-deploy