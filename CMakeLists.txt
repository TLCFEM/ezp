cmake_minimum_required(VERSION 3.12)

project(ezp)

if (NOT CMAKE_SYSTEM_NAME MATCHES "Linux")
    message(FATAL_ERROR "Only Linux is supported.")
endif ()

include_directories(${PROJECT_SOURCE_DIR})
include_directories(${PROJECT_SOURCE_DIR}/include)

add_compile_definitions(MPICH_SKIP_MPICXX)
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    add_compile_options(-fopenmp)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
    add_compile_options(-qopenmp)
    add_compile_options(-Rno-debug-disables-optimization)
    add_link_options(-Rno-debug-disables-optimization)
endif ()

set(CMAKE_CXX_STANDARD 20)

option(EZP_ADD_UNDERSCORE "Use lowercase with appended underscore subroutine names." ON)
if (EZP_ADD_UNDERSCORE)
    add_compile_definitions(EZP_UNDERSCORE)
endif ()

set(MKL_LINK static)
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(MKL_THREADING gnu_thread)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
    set(MKL_THREADING intel_thread)
endif ()
string(TOLOWER "${MPI_HOME}" MPI_PATH_LOWER)
if (MPI_PATH_LOWER MATCHES "openmpi")
    set(MKL_MPI openmpi)
    message(STATUS "MKL_MPI: ${MKL_MPI}")
elseif (MPI_PATH_LOWER MATCHES "mpich")
    set(MKL_MPI mpich)
    message(STATUS "MKL_MPI: ${MKL_MPI}")
endif ()

option(EZP_USE_64BIT_INT "Use 64-bit integer." OFF)
if (EZP_USE_64BIT_INT)
    add_compile_definitions(EZP_INT64)
    add_compile_definitions(MUMPS_INTSIZE64)
    set(MKL_INTERFACE ilp64)
else ()
    set(MKL_INTERFACE lp64)
endif ()
find_package(MKL QUIET)
if (MKL_FOUND)
    message(STATUS "Using MKL.")
    link_libraries(MKL::MKL_SCALAPACK)
    add_compile_definitions(EZP_MKL)
endif ()

find_package(MPI REQUIRED)
message(STATUS ${MPIEXEC_EXECUTABLE})

get_filename_component(MPI_ROOT_DIR ${MPIEXEC_EXECUTABLE} DIRECTORY)
get_filename_component(MPI_ROOT_DIR ${MPI_ROOT_DIR} DIRECTORY)
find_library(MPI_FORT_LIB mpichfort mpi_mpifh mpifort HINTS ${MPI_ROOT_DIR}/lib NO_CACHE REQUIRED)
message(STATUS "MPI_FORT_LIB: ${MPI_FORT_LIB}")

if (NOT MKL_FOUND)
    option(EZP_USE_SYSTEM_LIBS "Use system libraries." OFF)
    if (EZP_USE_SYSTEM_LIBS)
        find_library(SCALAPACK_LIB scalapack)
        if (SCALAPACK_LIB)
            message(STATUS "Using system libraries.")
            link_libraries(${SCALAPACK_LIB})
        else ()
            message(FATAL_ERROR "ScaLAPACK not found.")
        endif ()
        find_library(FLEX_LIB flexiblas)
        if (FLEX_LIB)
            link_libraries(${FLEX_LIB})
        endif ()
        find_library(OPENBLAS_LIB openblas)
        if (OPENBLAS_LIB)
            message(STATUS "Using OpenBLAS.")
            link_libraries(${OPENBLAS_LIB})
        endif ()
    else ()
        link_directories(${PROJECT_SOURCE_DIR}/libs)
        string(TOLOWER ${MPI_C_INCLUDE_DIRS} MPI_PATH)
        if (MPI_PATH MATCHES "openmpi")
            message(STATUS "Using OpenMPI.")
            link_libraries(scalapack-openmpi)
        else ()
            message(STATUS "Using MPICH.")
            link_libraries(scalapack-mpich)
        endif ()
        link_libraries(lapack blas gfortran)
    endif ()
endif ()

link_libraries(MPI::MPI_C MPI::MPI_CXX)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_options(-Wall)
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        add_compile_options(-fprofile-arcs -ftest-coverage)
        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconcepts-diagnostics-depth=4>)
        link_libraries(gcov)
    elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
        add_compile_options(-fprofile-instr-generate -fcoverage-mapping)
    endif ()
    option(EZP_ASAN "Enable asan." OFF)
endif ()

if (EZP_ASAN)
    add_compile_options(-fsanitize=address)
    add_link_options(-fsanitize=address)
endif ()

option(EZP_TEST "Enable testing." OFF)
if (EZP_TEST)
    add_compile_definitions(EZP_ENABLE_TEST)
endif ()

add_subdirectory(external/mumps)
link_libraries(mumps)

# ===============================================
# for lis
# ===============================================
add_compile_definitions(USE_COMPLEX USE_VEC_COMP USE_MPI)

if (EZP_USE_64BIT_INT)
    add_compile_definitions(_LONG__LONG)
endif ()

include(CheckIncludeFile)
check_include_file(complex.h HAVE_COMPLEX_H)
if (HAVE_COMPLEX_H)
    add_compile_definitions(HAVE_COMPLEX_H)
endif ()
check_include_file(malloc.h HAVE_MALLOC_H)
if (HAVE_MALLOC_H)
    add_compile_definitions(HAVE_MALLOC_H)
endif ()
check_include_file(quadmath.h HAVE_QUADMATH_H)
if (HAVE_QUADMATH_H)
    add_compile_definitions(HAVE_QUADMATH_H)
endif ()
# ===============================================
# for lis
# ===============================================
add_subdirectory(external/lis)
link_libraries(lis)

file(GLOB EXAMPLES "*.cpp" "examples/*.cpp")
foreach (EXAMPLE ${EXAMPLES})
    get_filename_component(EXAMPLE_NAME ${EXAMPLE} NAME_WLE)
    add_executable(${EXAMPLE_NAME} ${EXAMPLE})
endforeach ()

file(GLOB EXAMPLES "tests/*.cpp")
if (EZP_TEST)
    add_executable(catch2 ${EXAMPLES} include/catch2/catchy.cpp)
else ()
    foreach (EXAMPLE ${EXAMPLES})
        get_filename_component(EXAMPLE_NAME ${EXAMPLE} NAME_WLE)
        add_executable(${EXAMPLE_NAME} ${EXAMPLE})
    endforeach ()
endif ()

option(EZP_STANDALONE "Enable standalone solver." OFF)
if (EZP_STANDALONE)
    include_directories(mpl)
    file(GLOB EXAMPLES "standalone/*.cpp")
    foreach (EXAMPLE ${EXAMPLES})
        get_filename_component(EXAMPLE_NAME ${EXAMPLE} NAME_WLE)
        add_executable(${EXAMPLE_NAME} ${EXAMPLE})
        install(TARGETS ${EXAMPLE_NAME} DESTINATION bin)
    endforeach ()
endif ()
